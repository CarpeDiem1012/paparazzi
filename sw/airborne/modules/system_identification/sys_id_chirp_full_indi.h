/*
 * Copyright (C) Dennis van Wijngaarden <D.C.vanWIjngaarden@tudelft.nl>
 *
 * This file is part of paparazzi
 *
 * paparazzi is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * paparazzi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with paparazzi; see the file COPYING.  If not, see
 * <http://www.gnu.org/licenses/>.
 */

/** @file "modules/system_identification/sys_id_chirp_full_indi.h"
 * @author Dennis van Wijngaarden <D.C.vanWIjngaarden@tudelft.nl>
 * This module will add phi, theta and psi commands in terms of chrirps to the quat setpoint generated by stabilization_indi
 */

#ifndef CHIRP_FULL_INDI_H
#define CHIRP_FULL_INDI_H

#include "paparazzi.h"
#include "math/pprz_algebra_int.h"
#include "math/pprz_algebra_float.h"

extern uint8_t chirp_active;  // Boolean to check if chirp is active
extern float chirp_amplitude; // Chirp amplitude in degrees
extern float chirp_noise_stdv_onaxis_ratio; // On-axis noise is amplitude times this value
extern float chirp_noise_stdv_offaxis; // Off-axis noise (the axes that the chirp is not applied to)
extern float chirp_fstart_hz; // Start frequency of chrirp
extern float chirp_fstop_hz;  // Stop frequency of chrirp
extern float chirp_length_s;  // Length of chirp

extern uint8_t chirp_axis;    // Chrip axis (roll, pitch, yaw)

extern void sys_id_chirp_full_indi_init(void);

// If chirp is running, update its values
extern void sys_id_chirp_full_indi_run(void);

// Handlers for changing gcs variables
extern void sys_id_chirp_full_indi_activate_handler(uint8_t activate); // Activate the chirp
extern void sys_id_chirp_full_indi_axis_handler(uint8_t axis); // Check if new axis is valid
extern void sys_id_chirp_full_indi_fstart_handler(float fstart); // Check if fstart is lower than current fend
extern void sys_id_chirp_full_indi_fstop_handler(float fstop); // Check if fend is higher than current fstart

// Add the current chirp values to the in_cmd values if motors_on is true
extern void sys_id_chirp_full_indi_add_values(struct Int32Quat *quat_sp);

#endif  // CHIRP_FULL_INDI_H
